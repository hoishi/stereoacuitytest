%% StereoTestHaplo151201-4pos-UL-TEST0.5
load 'env.mat';
testDisparity = [ -0.256,  -0.064, -0.016, -0.004, ...
                   0.256,   0.064,  0.016,  0.004];
testPosition = [-1.5*sqrt(2),-1.5*sqrt(2)]; 
haploPosition = [-2*atan(env.scrnSize(1)/10/2/2/env.viewDistance/2)*180/pi, 0]; 
testPosition = testPosition + haploPosition;
numTrial = 3;

exp.description = '';
exp.type = 'Constant';

exp.isForcedChoice = true;  % Forced choice task ÇÃèÍçá true
exp.isRtTask       = false; % Reaction time task ÇÃèÍçá true

% Feedback
exp.showFeedback = true;
exp.feedbackTxt  = {'NEAR', 'FAR'};

% Responses
exp.response(1).code = 1;
exp.response(1).key  = 'LeftArrow';
exp.response(2).code = 2;
exp.response(2).key  = 'RightArrow';

% Trial time table
exp.trialTimeTable(1).trialTime  = 0;
exp.trialTimeTable(1).event      = 'BEGIN_TRIAL';
exp.trialTimeTable(2).trialTime  = 0;
exp.trialTimeTable(2).event      = 'STIM01_ONSET';
exp.trialTimeTable(3).trialTime  = 1;
exp.trialTimeTable(3).event      = 'STIM02_ONSET';
exp.trialTimeTable(4).trialTime  = 2.5;
exp.trialTimeTable(4).event      = 'STIM01_OFFSET';
exp.trialTimeTable(5).trialTime  = 1.5;
exp.trialTimeTable(5).event      = 'STIM02_OFFSET';
exp.trialTimeTable(6).trialTime  = 1.5;
exp.trialTimeTable(6).event      = 'RESPONSE_ONSET';
exp.trialTimeTable(7).trialTime  = 2.5;
exp.trialTimeTable(7).event      = 'RESPONSE_OFFSET';
exp.trialTimeTable(8).trialTime  = 2.5;
exp.trialTimeTable(8).event      = 'END_TRIAL';

% Trial sequence
for n = 1:length(testDisparity)
    exp.trial(n).flipFreq = 60;
    exp.trial(n).stim(1).type = 'FixationCrossWithRDS';
    exp.trial(n).stim(1).drawFunc = @DrawFixationPointWithRDS;
    exp.trial(n).stim(1).parameters.position = haploPosition;
    exp.trial(n).stim(1).parameters.length   = 0.3;
    exp.trial(n).stim(1).parameters.width    = 0.05;
    exp.trial(n).stim(1).parameters.color    = [1, 1, 1];
    exp.trial(n).stim(1).parameters.dotSize        = 0.16;
    exp.trial(n).stim(1).parameters.dotDensity     = 0.05;
    exp.trial(n).stim(1).parameters.brightDotColor = [ 1, 1, 1 ];
    exp.trial(n).stim(1).parameters.darkDotColor   = [ 0, 0, 0 ];
    exp.trial(n).stim(1).parameters.patchShape     = 'Bipartite_Circle';
    exp.trial(n).stim(1).parameters.patchSize      = [ 1, 1 ];
    exp.trial(n).stim(1).parameters.stimPos        = haploPosition;
    exp.trial(n).stim(1).parameters.disparity      = [ 0, 0 ];
    exp.trial(n).stim(1).parameters.correlation    = [ 1, 1 ];
    exp.trial(n).stim(1).parameters.coherence      = [ 1, 1 ];
    exp.trial(n).stim(1).parameters.stimFreq       = 0.1;

    exp.trial(n).stim(2).type = 'BipartiteRDS';
    exp.trial(n).stim(2).drawFunc = @DrawRandomDotStereogram;
    exp.trial(n).stim(2).parameters.dotSize        = 0.16;
    exp.trial(n).stim(2).parameters.dotDensity     = 0.25;
    exp.trial(n).stim(2).parameters.brightDotColor = [ 1, 1, 1 ];
    exp.trial(n).stim(2).parameters.darkDotColor   = [ 0, 0, 0 ];
    exp.trial(n).stim(2).parameters.patchShape     = 'Bipartite_Circle';
    exp.trial(n).stim(2).parameters.patchSize      = [ 3, 4 ];
    exp.trial(n).stim(2).parameters.stimPos        = testPosition;
    exp.trial(n).stim(2).parameters.disparity      = [ testDisparity(n), 0 ];
    exp.trial(n).stim(2).parameters.correlation    = [ 1, 1 ];
    exp.trial(n).stim(2).parameters.coherence      = [ 1, 1 ];
    exp.trial(n).stim(2).parameters.stimFreq       = 20;
end

exp.trial = repmat(exp.trial, 1, numTrial);
exp.trial = Shuffle(exp.trial);